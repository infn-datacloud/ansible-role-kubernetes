---
- name: Expose apiserver through ingress
  block:
  - template:
      src: templates/api-server-ingress.yaml.j2
      dest: /etc/api-server-ingress.yaml
  - ansible.builtin.command: kubectl apply -f /etc/api-server-ingress.yaml
    environment:
      KUBECONFIG: "{{ kubeconfig_path }}"

- name: Create service account for remote access
  block:
  - ansible.builtin.copy:
      src: files/admin-cred.yaml
      dest: /etc/admin-cred.yml
  - ansible.builtin.command: kubectl apply -f /etc/admin-cred.yml
    environment:
      KUBECONFIG: "{{ kubeconfig_path }}"

- name: Configure kubeconfig
  block:
  - ansible.builtin.copy:
      src: files/kubeconfig
      dest: /etc/kubeconfig
  - ansible.builtin.command: kubectl -n kube-system get secret admin-token -o jsonpath='{.data.token}' | base64 -d
    register: admin_token
    changed_when: false
  - ansible.builtin.command: kubectl config --kubeconfig=/etc/kubeconfig set-credentials admin --token={{ admin_token.stdout }}
  - ansible.builtin.command: kubectl config --kubeconfig=/etc/kubeconfig set-cluster public --server=https://api-kubernetes.{{ dns_name }} --insecure-skip-tls-verify
  - ansible.builtin.command: kubectl config --kubeconfig=/etc/kubeconfig set-context public --cluster=public --namespace=default --user=admin
  - ansible.builtin.command: kubectl config --kubeconfig=/etc/kubeconfig use-context public
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: Register kubeconfig
  shell: kubectl config --kubeconfig=/etc/kubeconfig view --raw
  register: kubeconfig
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: KUBECONFIG file
  debug:
    var: kubeconfig.stdout.split('\n')
