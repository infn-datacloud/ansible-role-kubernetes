---
- name: Expose apiserver through ingress
  block:
  - template:
      src: templates/api-server-ingress.yaml
      dest: /etc/api-server-ingress.yaml
  - command: kubectl apply -f /etc/api-server-ingress.yaml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

- name: Create service account for remote access
  block:
  - copy:
      src: files/kubeconfig
      dest: /etc/kubeconfig
  - copy:
      src: files/admin-cred.yaml
      dest: /etc/admin-cred.yml
  - shell: |
      kubectl apply -f /etc/admin-cred.yml
      kubectl create --dry-run=client clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:admin -o yaml | kubectl apply -f -
      export TOKEN=$(kubectl -n kube-system get secret admin-token -o jsonpath='{.data.token}' | base64 -d)
      kubectl config --kubeconfig=/etc/kubeconfig set-credentials admin --token=$TOKEN
      kubectl config --kubeconfig=/etc/kubeconfig set-cluster public --server=https://api-kubernetes.{{ dns_name }} --insecure-skip-tls-verify
      kubectl config --kubeconfig=/etc/kubeconfig set-context public --cluster=public --namespace=default --user=admin
      kubectl config --kubeconfig=/etc/kubeconfig use-context public
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

- name: Register kubeconfig
  shell: kubectl config --kubeconfig=/etc/kubeconfig view --raw
  register: kubeconfig
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: KUBECONFIG file
  debug:
    var: kubeconfig.stdout.split('\n')

- name: Organizing Cluster Access Using kubeconfig Files
  block:
  - name: Create kube directory if not exist
    file:
      path: /root/.kube/
      state: directory
      mode: '0750'
  - name: Copy admin file
    copy:
      src: /etc/kubernetes/admin.conf
      dest: /root/.kube/config
      owner: root
      group: root
      mode: '0600'
      remote_src: yes
